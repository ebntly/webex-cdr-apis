export interface CdrEntry {
  answerIndicator: string;
  answerTime?: string;
  answered: string;
  authCode: string;
  callId: string;
  callOutcome: string;
  callOutcomeReason: string;
  callTransferTime?: string;
  callType: string;
  calledLineId: string;
  calledNumber: string;
  callingLineId: string;
  callingNumber: string;
  clientType: string;
  clientVersion: string;
  correlationId: string;
  departmentId: string;
  deviceMac: string;
  direction: string;
  duration: number;
  finalLocalSessionId: string;
  finalRemoteSessionId: string;
  inboundTrunk: string;
  intlCountry: string;
  localCallId: string;
  localSessionId: string;
  location: string;
  model: string;
  networkCallId: string;
  orgUuid: string;
  originalReason: string;
  osType: string;
  outboundTrunk: string;
  pstnEntity: string;
  pstnProviderId: string;
  pstnProviderName: string;
  pstnOrgId: string;
  redirectReason: string;
  redirectingNumber: string;
  relatedCallId: string;
  relatedReason: string;
  releaseTime: string;
  releasingParty: string;
  remoteCallId: string;
  remoteSessionId: string;
  reportGroup: string;
  reportId: string;
  reportTime: string;
  ringDuration: number;
  siteMainNumber: string;
  siteUuid: string;
  startTime: string;
  subClientType: string;
  transferRelatedCallId: string;
  userId: string;
  userNumber: string;
  userType: string;
  userUuid: string;
}

export type CdrEntryWithId = CdrEntry & { id: string; };