import { CdrEntry as WebexCdrEntry } from 'webex-proxy-api/dist/schema';
import { CdrEntry } from 'webex-data/dist/models';
import { Entity } from '@loopback/repository';

type Map = Record<keyof Omit<CdrEntry, keyof Entity | "id">, keyof WebexCdrEntry>;

const CDR_MAP: Map = {
  answered: 'Answered',
  answerIndicator: 'Answer indicator',
  answerTime: 'Answer time',
  authCode: 'Authorization code',
  callId: 'Call ID',
  calledLineId: 'Called line ID',
  callOutcome: 'Call outcome',
  callOutcomeReason: 'Call outcome reason',
  callTransferTime: 'Call transfer time',
  callType: 'Call type',
  calledNumber: 'Called number',
  callingLineId: 'Calling line ID',
  callingNumber: 'Calling number',
  clientType: 'Client type',
  clientVersion: 'Client version',
  correlationId: 'Correlation ID',
  departmentId: 'Department ID',
  deviceMac: 'Device MAC',
  direction: 'Direction',
  duration: 'Duration',
  finalLocalSessionId: 'Final local SessionID',
  finalRemoteSessionId: 'Final remote SessionID',
  inboundTrunk: 'Inbound trunk',
  intlCountry: 'International country',
  localCallId: 'Local call ID',
  localSessionId: 'Local SessionID',
  location: 'Location',
  model: 'Model',
  networkCallId: 'Network call ID',
  orgUuid: 'Org UUID',
  originalReason: 'Original reason',
  osType: 'OS type',
  outboundTrunk: 'Outbound trunk',
  pstnEntity: 'PSTN legal entity',
  pstnProviderId: 'PSTN provider ID',
  pstnProviderName: 'PSTN vendor name',
  pstnOrgId: 'PSTN vendor org ID',
  redirectReason: 'Redirect reason',
  redirectingNumber: 'Redirecting number',
  relatedCallId: 'Related call ID',
  relatedReason: 'Related reason',
  releaseTime: 'Release time',
  releasingParty: 'Releasing party',
  remoteCallId: 'Remote call ID',
  remoteSessionId: 'Remote SessionID',
  reportId: 'Report ID',
  reportTime: 'Report time',
  ringDuration: 'Ring duration',
  siteMainNumber: 'Site main number',
  siteUuid: 'Site UUID',
  startTime: 'Start time',
  subClientType: 'Sub client type',
  transferRelatedCallId: 'Transfer related call ID',
  userNumber: 'User number',
  userType: 'User type',
  userUuid: 'User UUID',
};

export function mapCdrEntry(entry:WebexCdrEntry): Omit<CdrEntry, keyof Entity | "id"> {
  return {
    answered: entry[CDR_MAP.answered] as string,
    answerIndicator: entry[CDR_MAP.answerIndicator] as string,
    answerTime: entry[CDR_MAP.answerTime] === '' ? undefined : entry[CDR_MAP.answerTime] as string,
    authCode: entry[CDR_MAP.authCode] as string,
    callId: entry[CDR_MAP.callId] as string,
    calledLineId: entry[CDR_MAP.calledLineId] as string,
    callOutcome: entry[CDR_MAP.callOutcome] as string,
    callOutcomeReason: entry[CDR_MAP.callOutcomeReason] as string,
    callTransferTime: entry[CDR_MAP.callTransferTime] === '' ? undefined : entry[CDR_MAP.callTransferTime] as string,
    callType: entry[CDR_MAP.callType] as string,
    calledNumber: entry[CDR_MAP.calledNumber] as string,
    callingLineId: entry[CDR_MAP.callingLineId] as string,
    callingNumber: entry[CDR_MAP.callingNumber] as string,
    clientType: entry[CDR_MAP.clientType] as string,
    clientVersion: entry[CDR_MAP.clientVersion] as string,
    correlationId: entry[CDR_MAP.correlationId] as string,
    departmentId: entry[CDR_MAP.departmentId] as string,
    deviceMac: entry[CDR_MAP.deviceMac] as string,
    direction: entry[CDR_MAP.direction] as string,
    duration: entry[CDR_MAP.duration] as number,
    finalLocalSessionId: entry[CDR_MAP.finalLocalSessionId] as string,
    finalRemoteSessionId: entry[CDR_MAP.finalRemoteSessionId] as string,
    inboundTrunk: entry[CDR_MAP.inboundTrunk] as string,
    intlCountry: entry[CDR_MAP.intlCountry] as string,
    localCallId: entry[CDR_MAP.localCallId] as string,
    localSessionId: entry[CDR_MAP.localSessionId] as string,
    location: entry[CDR_MAP.location] as string,
    model: entry[CDR_MAP.model] as string,
    networkCallId: entry[CDR_MAP.networkCallId] as string,
    orgUuid: entry[CDR_MAP.orgUuid] as string,
    originalReason: entry[CDR_MAP.originalReason] as string,
    osType: entry[CDR_MAP.osType] as string,
    outboundTrunk: entry[CDR_MAP.outboundTrunk] as string,
    pstnEntity: entry[CDR_MAP.pstnEntity] as string,
    pstnProviderId: entry[CDR_MAP.pstnProviderId] as string,
    pstnProviderName: entry[CDR_MAP.pstnProviderName] as string,
    pstnOrgId: entry[CDR_MAP.pstnOrgId] as string,
    redirectReason: entry[CDR_MAP.redirectReason] as string,
    redirectingNumber: entry[CDR_MAP.redirectingNumber] as string,
    relatedCallId: entry[CDR_MAP.relatedCallId] as string,
    relatedReason: entry[CDR_MAP.relatedReason] as string,
    releaseTime: entry[CDR_MAP.releaseTime] as string,
    releasingParty: entry[CDR_MAP.releasingParty] as string,
    remoteCallId: entry[CDR_MAP.remoteCallId] as string,
    remoteSessionId: entry[CDR_MAP.remoteSessionId] as string,
    reportId: entry[CDR_MAP.reportId] as string,
    reportTime: entry[CDR_MAP.reportTime] as string,
    ringDuration: parseInt(entry[CDR_MAP.ringDuration] as string, 10) as number,
    siteMainNumber: entry[CDR_MAP.siteMainNumber] as string,
    siteUuid: entry[CDR_MAP.siteUuid] as string,
    startTime: entry[CDR_MAP.startTime] as string,
    subClientType: entry[CDR_MAP.subClientType] as string,
    transferRelatedCallId: entry[CDR_MAP.transferRelatedCallId] as string,
    userNumber: entry[CDR_MAP.userNumber] as string,
    userType: entry[CDR_MAP.userType] as string,
    userUuid: entry[CDR_MAP.userUuid] as string,
  };
}
